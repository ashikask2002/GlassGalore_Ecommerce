// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/adminlogin": {
            "post": {
                "description": "Authenticate admin user and generate access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Admin login details in JSON format",
                        "name": "adminDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdminLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin authenticated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or authentication failure",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve a list of all categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CATEGORY MANAGEMENT"
                ],
                "summary": "Get categories",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not retrieve categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Add a new category using JSON payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CATEGORY MANAGEMENT"
                ],
                "summary": "Add category",
                "parameters": [
                    {
                        "description": "Category details in JSON format",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not add the category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Delete an existing category by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CATEGORY MANAGEMENT"
                ],
                "summary": "Delete category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID to be deleted",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not delete the category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Update an existing category using JSON payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CATEGORY MANAGEMENT"
                ],
                "summary": "Update category",
                "parameters": [
                    {
                        "description": "Category details in JSON format",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not update the category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/coupons": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve a list of all coupons",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN COUPON MANAGEMENT"
                ],
                "summary": "Get all coupons",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all coupons",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Could not get all coupons",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Reactivate a coupon by providing its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN COUPON MANAGEMENT"
                ],
                "summary": "Reactivate coupon",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Coupon ID to be reactivated",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully reactivated the coupon",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in converting ID or reactivating the coupon",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Create a new coupon using JSON payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN COUPON MANAGEMENT"
                ],
                "summary": "Create new coupon",
                "parameters": [
                    {
                        "description": "Coupon details in JSON format",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Coupons"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added the coupon",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not add the coupon",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Mark a coupon as invalid by providing its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN COUPON MANAGEMENT"
                ],
                "summary": "Make coupon invalid",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Coupon ID to be marked as invalid",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully made the coupon invalid",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in converting ID or making the coupon invalid",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/dashboard": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve details for the admin dashboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN DASHBOARD"
                ],
                "summary": "Get dashboard details",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved dashboard details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in getting dashboard details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve all category offers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN OFFER MANAGEMENT"
                ],
                "summary": "Get category offers",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved category offers",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in getting category offers",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Add a new offer for a category using JSON payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN OFFER MANAGEMENT"
                ],
                "summary": "Add category offer",
                "parameters": [
                    {
                        "description": "Category offer details in JSON format",
                        "name": "CategoryOffer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CategorytOfferResp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added the category offer",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Request fields in the wrong format or constraints not satisfied",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Error in adding the category offer",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Expire a category offer by providing its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN OFFER MANAGEMENT"
                ],
                "summary": "Expire category offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category offer to expire",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully expired the category offer",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in converting the ID or deleting the category offer",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of orders for administrative purposes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN ORDER MANAGEMENT"
                ],
                "summary": "Get admin orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved admin orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Page number not in the right format or could not retrieve orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Approve a specific order by providing its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN ORDER MANAGEMENT"
                ],
                "summary": "Approve order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the order to be approved",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully approved the order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Could not approve the order or incorrect order ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/payment-method": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve a list of all available payment methods",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN PAYMENT MANAGEMENT"
                ],
                "summary": "List payment methods",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all payment methods",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Cannot list the payment methods",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Add a new payment method using JSON payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN PAYMENT MANAGEMENT"
                ],
                "summary": "Add new payment method",
                "parameters": [
                    {
                        "description": "New payment method details in JSON format",
                        "name": "method",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NewPaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added payment method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not add the payment method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Delete a payment method by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN PAYMENT MANAGEMENT"
                ],
                "summary": "Delete payment method",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment method ID to be deleted",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the payment method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or error in deleting data",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Get a paginated list of products for admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN PRODUCT MANAGEMENT"
                ],
                "summary": "List products for admin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination, default is 1",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the records",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Page number not in the right format or could not retrieve records",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Add a new product using JSON payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN PRODUCT MANAGEMENT"
                ],
                "summary": "Add product",
                "parameters": [
                    {
                        "description": "Product details in JSON format",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddProducts"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Form file error or could not add the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Delete a product by providing the product ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN PRODUCT MANAGEMENT"
                ],
                "summary": "Delete product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID to be deleted",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not delete the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products/:id/stock": {
            "put": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Update the stock of a product by providing the product ID and new stock value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN PRODUCT MANAGEMENT"
                ],
                "summary": "Update product stock",
                "parameters": [
                    {
                        "description": "Product details in JSON format",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProductUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the product stock",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not update the product stock",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products/details": {
            "put": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Edit the details of a product by providing the product ID and updated details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN PRODUCT MANAGEMENT"
                ],
                "summary": "Edit product details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID to be edited",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated details for the product",
                        "name": "details",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EditProductDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully edited the product details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Problems in the ID or fields provided in the wrong format or could not edit the product details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products/upload_image": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Upload images for a product by providing the product ID and image files",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN PRODUCT MANAGEMENT"
                ],
                "summary": "Upload images for a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID for which images are to be uploaded",
                        "name": "product_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Images to be uploaded for the product",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully uploaded the images",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in converting ID, retrieving images from form, or updating images",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/salesreport": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieves sales report for the specified time period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN DASHBOARD"
                ],
                "summary": "Retrieve current sales report for a specific time period",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Time period for sales report",
                        "name": "period",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales report retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Unable to retrieve sales report",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN"
                ],
                "summary": "Get users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the users",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Page number not in the right format or could not retrieve records",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/block": {
            "put": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Block a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN"
                ],
                "summary": "Block user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to be blocked",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully blocked the user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "User could not be blocked",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/unblock": {
            "put": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Unblock a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN"
                ],
                "summary": "Unblock user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to be unblocked",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unblocked the user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "User could not be unblocked",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/cart/add-to-cart": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Add a product to the user's shopping cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CART MANAGEMENT"
                ],
                "summary": "Add item to cart",
                "parameters": [
                    {
                        "description": "Product details to add to the cart",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddToCart"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added to the cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "User ID retrieval failed, or fields provided in the wrong format, or error adding to the cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/cart/get": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve the products in the shopping cart for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CART MANAGEMENT"
                ],
                "summary": "Get user's shopping cart",
                "responses": {
                    "200": {
                        "description": "Products in the shopping cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in retrieving the shopping cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/cart/remove": {
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Remove a specific product from the shopping cart for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CART MANAGEMENT"
                ],
                "summary": "Remove a product from the shopping cart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cart ID",
                        "name": "cart_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully removed from cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in removing from cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/cart/update": {
            "put": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Update the quantity of a specific product in the shopping cart for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CART MANAGEMENT"
                ],
                "summary": "Update product quantity in the shopping cart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cart ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "New quantity",
                        "name": "quantity",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the quantity",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating the quantity",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/check-out": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Process the checkout for the user's shopping cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CHECKOUT"
                ],
                "summary": "Process checkout",
                "responses": {
                    "200": {
                        "description": "Successfully processed checkout",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "User ID retrieval failed, or error processing checkout",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/check-out/invoice": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Generate and download the invoice for a specific order by providing its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CHECKOUT"
                ],
                "summary": "Print invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the order for which the invoice is to be printed",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully downloaded the invoice",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in converting order ID or printing invoice",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "502": {
                        "description": "Error in printing invoice",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/check-out/order": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Create an order by providing order details including address, payment method, and coupon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CHECKOUT"
                ],
                "summary": "Order items from cart",
                "parameters": [
                    {
                        "description": "Order details in JSON format",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully made the order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in getting user ID, fields provided in the wrong format, or could not make the order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/home/product": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Get a paginated list of products for users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PRODUCT MANAGEMENT"
                ],
                "summary": "List products for user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination, default is 1",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the records",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Page number not in the right format or could not retrieve records",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Log in a user by providing login details in JSON format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login details in JSON format",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or constraints not satisfied",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "User could not be logged in",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/otplogin": {
            "post": {
                "description": "Send a One-Time Password (OTP) to the specified phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Send OTP",
                "parameters": [
                    {
                        "description": "Phone number details in JSON format",
                        "name": "phone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OTPData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not send OTP",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/payment": {
            "get": {
                "description": "Initiate the payment process using RazorPay for the specified user and order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Make payment using RazorPay",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID for whom the payment is being made",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Order ID for which the payment is being made",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML page for initiating the RazorPay payment",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error in the payment process",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/products/filter": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Get a list of products filtered by category ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PRODUCT MANAGEMENT"
                ],
                "summary": "Filter products by category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID for filtering products",
                        "name": "category_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the product list",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in conversion or cannot retrieve the product list",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/products/filterP": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Get a list of products within the specified price range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PRODUCT MANAGEMENT"
                ],
                "summary": "Filter products by price range",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Minimum price for filtering products",
                        "name": "price",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum price for filtering products",
                        "name": "pricetwo",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the product list",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in conversion or cannot retrieve the product list",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/products/rating": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Add or update the rating for a product by providing user ID, product ID, and rating",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PRODUCT MANAGEMENT"
                ],
                "summary": "Add or update rating for a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID for which rating is to be added or updated",
                        "name": "product_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Rating to be added or updated for the product (float64)",
                        "name": "rating",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added or updated the rating",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in converting ID, rating, or rating update",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/products/search": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Get a list of products based on search criteria",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PRODUCT MANAGEMENT"
                ],
                "summary": "Search products",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default is 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default is 5)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "description": "Search criteria in JSON format",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Search"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the product list",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in conversion or could not get any products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve addresses of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PROFILE"
                ],
                "summary": "Get user addresses",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user addresses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in retrieving user addresses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Edit details for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PROFILE"
                ],
                "summary": "Edit user details",
                "parameters": [
                    {
                        "description": "User details to be edited",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EditDetailsResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully edited the details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in editing the details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/profile/add": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Add a new address for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PROFILE"
                ],
                "summary": "Add user address",
                "parameters": [
                    {
                        "description": "Address details",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in adding the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/profile/details": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve details of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PROFILE"
                ],
                "summary": "Get user details",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in retrieving user details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/profile/orders": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve orders based on the provided order ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER ORDER MANAGEMENT"
                ],
                "summary": "Get orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID to retrieve specific order, omit for all orders",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Check your order ID again or could not get the orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Initiate a return process for a specific order by providing its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER ORDER MANAGEMENT"
                ],
                "summary": "Return order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the order to be returned",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully initiated the return process",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in converting order ID or returning order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Cancel a specific order by providing the order ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER ORDER MANAGEMENT"
                ],
                "summary": "Cancel order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the order to cancel",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully cancelled the order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Check your order ID again or could not cancel the order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/profile/orders/all": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve all orders for the authenticated user with optional pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER ORDER MANAGEMENT"
                ],
                "summary": "Get all orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination, default is 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of orders per page, default is 10",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Page number or count not in the correct format or could not retrieve orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/profile/security/password": {
            "put": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Change the password for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER PROFILE"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Password change details",
                        "name": "ChangePassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChangePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in changing the password",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/signup": {
            "post": {
                "description": "Register a new user by providing user details in JSON format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "User sign-up",
                "parameters": [
                    {
                        "description": "User details in JSON format",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserDetails"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully signed up",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or constraints not satisfied",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "User could not be signed up",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/verifyotp": {
            "post": {
                "description": "Verify the provided One-Time Password (OTP) code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "Verification code details in JSON format",
                        "name": "code",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VerifyData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully verified OTP",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Fields provided in the wrong format or could not verify OTP",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/wallet": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve details of the wallet for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "View user's wallet details",
                "responses": {
                    "200": {
                        "description": "Wallet details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error in retrieving wallet details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Category": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.AddAddress": {
            "type": "object",
            "required": [
                "Phone",
                "city",
                "house_name",
                "name",
                "pin",
                "state",
                "street"
            ],
            "properties": {
                "Phone": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "house_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pin": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                }
            }
        },
        "models.AddProducts": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "discription": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "product_name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "stock": {
                    "type": "integer"
                }
            }
        },
        "models.AddToCart": {
            "type": "object",
            "properties": {
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.AdminLogin": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8
                }
            }
        },
        "models.CategorytOfferResp": {
            "type": "object",
            "required": [
                "category_id",
                "discount_price",
                "offer_name"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "discount_price": {
                    "type": "integer"
                },
                "offer_name": {
                    "type": "string"
                }
            }
        },
        "models.ChangePassword": {
            "type": "object",
            "properties": {
                "old_password": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "re_password": {
                    "type": "string"
                }
            }
        },
        "models.Coupons": {
            "type": "object",
            "properties": {
                "coupon": {
                    "type": "string"
                },
                "discount_rate": {
                    "type": "integer"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "models.EditDetailsResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "models.EditProductDetails": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "discription": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "size": {
                    "type": "string"
                }
            }
        },
        "models.NewPaymentMethod": {
            "type": "object",
            "properties": {
                "payment_method": {
                    "type": "string"
                }
            }
        },
        "models.OTPData": {
            "type": "object",
            "required": [
                "phone"
            ],
            "properties": {
                "phone": {
                    "type": "string"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "address_id": {
                    "type": "integer"
                },
                "coupon_id": {
                    "type": "integer"
                },
                "payment_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.ProductUpdate": {
            "type": "object",
            "properties": {
                "product_id": {
                    "type": "integer"
                },
                "stock": {
                    "type": "integer"
                }
            }
        },
        "models.Search": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "search": {
                    "type": "string"
                }
            }
        },
        "models.UserDetails": {
            "type": "object",
            "properties": {
                "confirmpassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "models.UserLogin": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.VerifyData": {
            "type": "object",
            "required": [
                "code",
                "phone"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "messege": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerTokenAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Go + Gin E-Commerce API Glass Galore",
	Description:      "Glass Galore is the platform to buy Glasses",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
