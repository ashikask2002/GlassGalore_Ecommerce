definitions:
  domain.Category:
    properties:
      category:
        type: string
      id:
        type: integer
    type: object
  models.AddAddress:
    properties:
      Phone:
        type: string
      city:
        type: string
      house_name:
        type: string
      name:
        type: string
      pin:
        type: string
      state:
        type: string
      street:
        type: string
    required:
    - Phone
    - city
    - house_name
    - name
    - pin
    - state
    - street
    type: object
  models.AddProducts:
    properties:
      category_id:
        type: integer
      discription:
        type: string
      id:
        type: integer
      price:
        type: number
      product_name:
        type: string
      size:
        type: string
      stock:
        type: integer
    type: object
  models.AddToCart:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  models.AdminLogin:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    type: object
  models.CategorytOfferResp:
    properties:
      category_id:
        type: integer
      discount_price:
        type: integer
      offer_name:
        type: string
    required:
    - category_id
    - discount_price
    - offer_name
    type: object
  models.ChangePassword:
    properties:
      old_password:
        type: string
      password:
        type: string
      re_password:
        type: string
    type: object
  models.Coupons:
    properties:
      coupon:
        type: string
      discount_rate:
        type: integer
      valid:
        type: boolean
    type: object
  models.EditDetailsResponse:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.EditProductDetails:
    properties:
      category_id:
        type: integer
      discription:
        type: string
      name:
        type: string
      price:
        type: number
      size:
        type: string
    type: object
  models.NewPaymentMethod:
    properties:
      payment_method:
        type: string
    type: object
  models.OTPData:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  models.Order:
    properties:
      address_id:
        type: integer
      coupon_id:
        type: integer
      payment_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.ProductUpdate:
    properties:
      product_id:
        type: integer
      stock:
        type: integer
    type: object
  models.Search:
    properties:
      limit:
        type: integer
      page:
        type: integer
      search:
        type: string
    type: object
  models.UserDetails:
    properties:
      confirmpassword:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.VerifyData:
    properties:
      code:
        type: string
      phone:
        type: string
    required:
    - code
    - phone
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      messege:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact:
    name: API Support
  description: Glass Galore is the platform to buy Glasses
  title: Go + Gin E-Commerce API Glass Galore
  version: 1.0.0
paths:
  /admin/adminlogin:
    post:
      consumes:
      - application/json
      description: Authenticate admin user and generate access token
      parameters:
      - description: Admin login details in JSON format
        in: body
        name: adminDetails
        required: true
        schema:
          $ref: '#/definitions/models.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Admin authenticated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or authentication failure
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin login
      tags:
      - ADMIN
  /admin/category:
    delete:
      consumes:
      - application/json
      description: Delete an existing category by ID
      parameters:
      - description: Category ID to be deleted
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not delete the
            category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete category
      tags:
      - CATEGORY MANAGEMENT
    get:
      consumes:
      - application/json
      description: Retrieve a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all categories
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not retrieve categories
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get categories
      tags:
      - CATEGORY MANAGEMENT
    patch:
      consumes:
      - application/json
      description: Update an existing category using JSON payload
      parameters:
      - description: Category details in JSON format
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not update the
            category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update category
      tags:
      - CATEGORY MANAGEMENT
    post:
      consumes:
      - application/json
      description: Add a new category using JSON payload
      parameters:
      - description: Category details in JSON format
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not add the category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add category
      tags:
      - CATEGORY MANAGEMENT
  /admin/coupons:
    delete:
      consumes:
      - application/json
      description: Mark a coupon as invalid by providing its ID
      parameters:
      - description: Coupon ID to be marked as invalid
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully made the coupon invalid
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in converting ID or making the coupon invalid
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Make coupon invalid
      tags:
      - ADMIN COUPON MANAGEMENT
    get:
      consumes:
      - application/json
      description: Retrieve a list of all coupons
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all coupons
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Could not get all coupons
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get all coupons
      tags:
      - ADMIN COUPON MANAGEMENT
    post:
      consumes:
      - application/json
      description: Create a new coupon using JSON payload
      parameters:
      - description: Coupon details in JSON format
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/models.Coupons'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added the coupon
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not add the coupon
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Create new coupon
      tags:
      - ADMIN COUPON MANAGEMENT
    put:
      consumes:
      - application/json
      description: Reactivate a coupon by providing its ID
      parameters:
      - description: Coupon ID to be reactivated
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully reactivated the coupon
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in converting ID or reactivating the coupon
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Reactivate coupon
      tags:
      - ADMIN COUPON MANAGEMENT
  /admin/dashboard:
    get:
      consumes:
      - application/json
      description: Retrieve details for the admin dashboard
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved dashboard details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in getting dashboard details
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get dashboard details
      tags:
      - ADMIN DASHBOARD
  /admin/offers:
    delete:
      consumes:
      - application/json
      description: Expire a category offer by providing its ID
      parameters:
      - description: ID of the category offer to expire
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully expired the category offer
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in converting the ID or deleting the category offer
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Expire category offer
      tags:
      - ADMIN OFFER MANAGEMENT
    get:
      consumes:
      - application/json
      description: Retrieve all category offers
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved category offers
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in getting category offers
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get category offers
      tags:
      - ADMIN OFFER MANAGEMENT
    post:
      consumes:
      - application/json
      description: Add a new offer for a category using JSON payload
      parameters:
      - description: Category offer details in JSON format
        in: body
        name: CategoryOffer
        required: true
        schema:
          $ref: '#/definitions/models.CategorytOfferResp'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added the category offer
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Request fields in the wrong format or constraints not satisfied
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error in adding the category offer
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add category offer
      tags:
      - ADMIN OFFER MANAGEMENT
  /admin/orders:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of orders for administrative purposes
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved admin orders
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Page number not in the right format or could not retrieve orders
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get admin orders
      tags:
      - ADMIN ORDER MANAGEMENT
    patch:
      consumes:
      - application/json
      description: Approve a specific order by providing its ID
      parameters:
      - description: ID of the order to be approved
        in: query
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully approved the order
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Could not approve the order or incorrect order ID format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Approve order
      tags:
      - ADMIN ORDER MANAGEMENT
  /admin/payment-method:
    delete:
      consumes:
      - application/json
      description: Delete a payment method by its ID
      parameters:
      - description: Payment method ID to be deleted
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the payment method
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or error in deleting data
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete payment method
      tags:
      - ADMIN PAYMENT MANAGEMENT
    get:
      consumes:
      - application/json
      description: Retrieve a list of all available payment methods
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all payment methods
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Cannot list the payment methods
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: List payment methods
      tags:
      - ADMIN PAYMENT MANAGEMENT
    post:
      consumes:
      - application/json
      description: Add a new payment method using JSON payload
      parameters:
      - description: New payment method details in JSON format
        in: body
        name: method
        required: true
        schema:
          $ref: '#/definitions/models.NewPaymentMethod'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added payment method
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not add the payment
            method
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add new payment method
      tags:
      - ADMIN PAYMENT MANAGEMENT
  /admin/products:
    delete:
      consumes:
      - application/json
      description: Delete a product by providing the product ID
      parameters:
      - description: Product ID to be deleted
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not delete the
            product
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete product
      tags:
      - ADMIN PRODUCT MANAGEMENT
    get:
      consumes:
      - application/json
      description: Get a paginated list of products for admin
      parameters:
      - description: Page number for pagination, default is 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the records
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Page number not in the right format or could not retrieve records
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: List products for admin
      tags:
      - ADMIN PRODUCT MANAGEMENT
    post:
      consumes:
      - application/json
      description: Add a new product using JSON payload
      parameters:
      - description: Product details in JSON format
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.AddProducts'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Form file error or could not add the product
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add product
      tags:
      - ADMIN PRODUCT MANAGEMENT
  /admin/products/:id/stock:
    put:
      consumes:
      - application/json
      description: Update the stock of a product by providing the product ID and new
        stock value
      parameters:
      - description: Product details in JSON format
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the product stock
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not update the
            product stock
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update product stock
      tags:
      - ADMIN PRODUCT MANAGEMENT
  /admin/products/details:
    put:
      consumes:
      - application/json
      description: Edit the details of a product by providing the product ID and updated
        details
      parameters:
      - description: Product ID to be edited
        in: query
        name: id
        required: true
        type: integer
      - description: Updated details for the product
        in: body
        name: details
        required: true
        schema:
          $ref: '#/definitions/models.EditProductDetails'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully edited the product details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Problems in the ID or fields provided in the wrong format or
            could not edit the product details
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit product details
      tags:
      - ADMIN PRODUCT MANAGEMENT
  /admin/products/upload_image:
    post:
      consumes:
      - multipart/form-data
      description: Upload images for a product by providing the product ID and image
        files
      parameters:
      - description: Product ID for which images are to be uploaded
        in: query
        name: product_id
        required: true
        type: integer
      - description: Images to be uploaded for the product
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully uploaded the images
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in converting ID, retrieving images from form, or updating
            images
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Upload images for a product
      tags:
      - ADMIN PRODUCT MANAGEMENT
  /admin/salesreport:
    get:
      consumes:
      - application/json
      description: Retrieves sales report for the specified time period
      parameters:
      - description: Time period for sales report
        in: query
        name: period
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sales report retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Unable to retrieve sales report
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve current sales report for a specific time period
      tags:
      - ADMIN DASHBOARD
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the users
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Page number not in the right format or could not retrieve records
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get users
      tags:
      - ADMIN
  /admin/users/block:
    put:
      consumes:
      - application/json
      description: Block a user by their ID
      parameters:
      - description: User ID to be blocked
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully blocked the user
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: User could not be blocked
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block user
      tags:
      - ADMIN
  /admin/users/unblock:
    put:
      consumes:
      - application/json
      description: Unblock a user by their ID
      parameters:
      - description: User ID to be unblocked
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully unblocked the user
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: User could not be unblocked
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Unblock user
      tags:
      - ADMIN
  /users/cart/add-to-cart:
    post:
      consumes:
      - application/json
      description: Add a product to the user's shopping cart
      parameters:
      - description: User ID obtained from authentication
        in: header
        name: id
        required: true
        type: integer
      - description: Product details to add to the cart
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/models.AddToCart'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added to the cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: User ID retrieval failed, or fields provided in the wrong format,
            or error adding to the cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add item to cart
      tags:
      - CART MANAGEMENT
  /users/cart/get:
    get:
      consumes:
      - application/json
      description: Retrieve the products in the shopping cart for the authenticated
        user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products in the shopping cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in retrieving the shopping cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get user's shopping cart
      tags:
      - CART MANAGEMENT
  /users/cart/remove:
    delete:
      consumes:
      - application/json
      description: Remove a specific product from the shopping cart for the authenticated
        user
      parameters:
      - description: Cart ID
        in: query
        name: cart_id
        required: true
        type: integer
      - description: Product ID
        in: query
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully removed from cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in removing from cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Remove a product from the shopping cart
      tags:
      - CART MANAGEMENT
  /users/cart/update:
    put:
      consumes:
      - application/json
      description: Update the quantity of a specific product in the shopping cart
        for the authenticated user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      - description: Product ID
        in: query
        name: product
        required: true
        type: integer
      - description: New quantity
        in: query
        name: quantity
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the quantity
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in updating the quantity
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update product quantity in the shopping cart
      tags:
      - CART MANAGEMENT
  /users/check-out:
    get:
      consumes:
      - application/json
      description: Process the checkout for the user's shopping cart
      parameters:
      - description: User ID obtained from authentication
        in: header
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully processed checkout
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: User ID retrieval failed, or error processing checkout
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Process checkout
      tags:
      - CHECKOUT
  /users/check-out/invoice:
    get:
      consumes:
      - application/json
      description: Generate and download the invoice for a specific order by providing
        its ID
      parameters:
      - description: ID of the order for which the invoice is to be printed
        in: query
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully downloaded the invoice
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in converting order ID or printing invoice
          schema:
            $ref: '#/definitions/response.Response'
        "502":
          description: Error in printing invoice
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Print invoice
      tags:
      - CHECKOUT
  /users/check-out/order:
    post:
      consumes:
      - application/json
      description: Create an order by providing order details including address, payment
        method, and coupon
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      - description: Order details in JSON format
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully made the order
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in getting user ID, fields provided in the wrong format,
            or could not make the order
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Order items from cart
      tags:
      - CHECKOUT
  /users/home/product:
    get:
      consumes:
      - application/json
      description: Get a paginated list of products for users
      parameters:
      - description: Page number for pagination, default is 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the records
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Page number not in the right format or could not retrieve records
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: List products for user
      tags:
      - USER PRODUCT MANAGEMENT
  /users/login:
    post:
      consumes:
      - application/json
      description: Log in a user by providing login details in JSON format
      parameters:
      - description: Login details in JSON format
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully logged in
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or constraints not satisfied
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: User could not be logged in
          schema:
            $ref: '#/definitions/response.Response'
      summary: User login
      tags:
      - USER
  /users/otplogin:
    post:
      consumes:
      - application/json
      description: Send a One-Time Password (OTP) to the specified phone number
      parameters:
      - description: Phone number details in JSON format
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/models.OTPData'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not send OTP
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send OTP
      tags:
      - USER
  /users/payment:
    get:
      consumes:
      - application/json
      description: Initiate the payment process using RazorPay for the specified user
        and order
      parameters:
      - description: User ID for whom the payment is being made
        in: query
        name: user_id
        required: true
        type: string
      - description: Order ID for which the payment is being made
        in: query
        name: order_id
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: HTML page for initiating the RazorPay payment
          schema:
            type: string
        "400":
          description: Error in the payment process
          schema:
            $ref: '#/definitions/response.Response'
      summary: Make payment using RazorPay
      tags:
      - USER
  /users/products/filter:
    get:
      consumes:
      - application/json
      description: Get a list of products filtered by category ID
      parameters:
      - description: Category ID for filtering products
        in: query
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the product list
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in conversion or cannot retrieve the product list
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Filter products by category
      tags:
      - USER PRODUCT MANAGEMENT
  /users/products/filterP:
    get:
      consumes:
      - application/json
      description: Get a list of products within the specified price range
      parameters:
      - description: Minimum price for filtering products
        in: query
        name: price
        required: true
        type: integer
      - description: Maximum price for filtering products
        in: query
        name: pricetwo
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the product list
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in conversion or cannot retrieve the product list
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Filter products by price range
      tags:
      - USER PRODUCT MANAGEMENT
  /users/products/rating:
    post:
      consumes:
      - application/json
      description: Add or update the rating for a product by providing user ID, product
        ID, and rating
      parameters:
      - description: Product ID for which rating is to be added or updated
        in: query
        name: product_id
        required: true
        type: integer
      - description: Rating to be added or updated for the product (float64)
        in: query
        name: rating
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added or updated the rating
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in converting ID, rating, or rating update
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add or update rating for a product
      tags:
      - USER PRODUCT MANAGEMENT
  /users/products/search:
    post:
      consumes:
      - application/json
      description: Get a list of products based on search criteria
      parameters:
      - description: Page number for pagination (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 5)
        in: query
        name: limit
        type: integer
      - description: Search criteria in JSON format
        in: body
        name: search
        required: true
        schema:
          $ref: '#/definitions/models.Search'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the product list
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in conversion or could not get any products
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Search products
      tags:
      - USER PRODUCT MANAGEMENT
  /users/profile:
    get:
      consumes:
      - application/json
      description: Retrieve addresses of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user addresses
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in retrieving user addresses
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get user addresses
      tags:
      - USER PROFILE
    put:
      consumes:
      - application/json
      description: Edit details for the authenticated user
      parameters:
      - description: User details to be edited
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/models.EditDetailsResponse'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully edited the details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in editing the details
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit user details
      tags:
      - USER PROFILE
  /users/profile/add:
    post:
      consumes:
      - application/json
      description: Add a new address for the authenticated user
      parameters:
      - description: Address details
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.AddAddress'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added the address
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in adding the address
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add user address
      tags:
      - USER PROFILE
  /users/profile/details:
    get:
      consumes:
      - application/json
      description: Retrieve details of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in retrieving user details
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get user details
      tags:
      - USER PROFILE
  /users/profile/orders:
    delete:
      consumes:
      - application/json
      description: Cancel a specific order by providing the order ID
      parameters:
      - description: ID of the order to cancel
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully cancelled the order
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Check your order ID again or could not cancel the order
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Cancel order
      tags:
      - USER ORDER MANAGEMENT
    get:
      consumes:
      - application/json
      description: Retrieve orders based on the provided order ID
      parameters:
      - description: Order ID to retrieve specific order, omit for all orders
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved orders
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Check your order ID again or could not get the orders
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get orders
      tags:
      - USER ORDER MANAGEMENT
    put:
      consumes:
      - application/json
      description: Initiate a return process for a specific order by providing its
        ID
      parameters:
      - description: ID of the order to be returned
        in: query
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully initiated the return process
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in converting order ID or returning order
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Return order
      tags:
      - USER ORDER MANAGEMENT
  /users/profile/orders/all:
    get:
      consumes:
      - application/json
      description: Retrieve all orders for the authenticated user with optional pagination
      parameters:
      - description: Page number for pagination, default is 1
        in: query
        name: page
        type: integer
      - description: Number of orders per page, default is 10
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all orders
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Page number or count not in the correct format or could not
            retrieve orders
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get all orders
      tags:
      - USER ORDER MANAGEMENT
  /users/profile/security/password:
    put:
      consumes:
      - application/json
      description: Change the password for the authenticated user
      parameters:
      - description: Password change details
        in: body
        name: ChangePassword
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in changing the password
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Change user password
      tags:
      - USER PROFILE
  /users/signup:
    post:
      consumes:
      - application/json
      description: Register a new user by providing user details in JSON format
      parameters:
      - description: User details in JSON format
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDetails'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully signed up
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or constraints not satisfied
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: User could not be signed up
          schema:
            $ref: '#/definitions/response.Response'
      summary: User sign-up
      tags:
      - USER
  /users/verifyotp:
    post:
      consumes:
      - application/json
      description: Verify the provided One-Time Password (OTP) code
      parameters:
      - description: Verification code details in JSON format
        in: body
        name: code
        required: true
        schema:
          $ref: '#/definitions/models.VerifyData'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully verified OTP
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in the wrong format or could not verify OTP
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify OTP
      tags:
      - USER
  /users/wallet:
    get:
      consumes:
      - application/json
      description: Retrieve details of the wallet for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Wallet details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in retrieving wallet details
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: View user's wallet details
      tags:
      - Wallet
securityDefinitions:
  BearerTokenAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
