// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/helper/interfaces/helper.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	models "GlassGalore/pkg/utils/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockHelper is a mock of Helper interface.
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// MockHelperMockRecorder is the mock recorder for MockHelper.
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance.
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockHelper) CompareHashAndPassword(a, b string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", a, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockHelperMockRecorder) CompareHashAndPassword(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockHelper)(nil).CompareHashAndPassword), a, b)
}

// GenerateTokenAdmin mocks base method.
func (m *MockHelper) GenerateTokenAdmin(admin models.AdminDetailsResponse) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenAdmin", admin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokenAdmin indicates an expected call of GenerateTokenAdmin.
func (mr *MockHelperMockRecorder) GenerateTokenAdmin(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenAdmin", reflect.TypeOf((*MockHelper)(nil).GenerateTokenAdmin), admin)
}

// GenerateTokenClients mocks base method.
func (m *MockHelper) GenerateTokenClients(user models.UserDetailsResponse) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenClients", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokenClients indicates an expected call of GenerateTokenClients.
func (mr *MockHelperMockRecorder) GenerateTokenClients(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenClients", reflect.TypeOf((*MockHelper)(nil).GenerateTokenClients), user)
}

// GetTimeFromPeriod mocks base method.
func (m *MockHelper) GetTimeFromPeriod(timePeriod string) (time.Time, time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeFromPeriod", timePeriod)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// GetTimeFromPeriod indicates an expected call of GetTimeFromPeriod.
func (mr *MockHelperMockRecorder) GetTimeFromPeriod(timePeriod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeFromPeriod", reflect.TypeOf((*MockHelper)(nil).GetTimeFromPeriod), timePeriod)
}

// IsValidEmail mocks base method.
func (m *MockHelper) IsValidEmail(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidEmail", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidEmail indicates an expected call of IsValidEmail.
func (mr *MockHelperMockRecorder) IsValidEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidEmail", reflect.TypeOf((*MockHelper)(nil).IsValidEmail), email)
}

// IsValidPIN mocks base method.
func (m *MockHelper) IsValidPIN(pincode string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidPIN", pincode)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidPIN indicates an expected call of IsValidPIN.
func (mr *MockHelperMockRecorder) IsValidPIN(pincode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidPIN", reflect.TypeOf((*MockHelper)(nil).IsValidPIN), pincode)
}

// PasswordHashing mocks base method.
func (m *MockHelper) PasswordHashing(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordHashing", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordHashing indicates an expected call of PasswordHashing.
func (mr *MockHelperMockRecorder) PasswordHashing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordHashing", reflect.TypeOf((*MockHelper)(nil).PasswordHashing), arg0)
}

// PhoneValidation mocks base method.
func (m *MockHelper) PhoneValidation(phone string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhoneValidation", phone)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PhoneValidation indicates an expected call of PhoneValidation.
func (mr *MockHelperMockRecorder) PhoneValidation(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhoneValidation", reflect.TypeOf((*MockHelper)(nil).PhoneValidation), phone)
}

// TwilioSendOTP mocks base method.
func (m *MockHelper) TwilioSendOTP(phone, serviceID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwilioSendOTP", phone, serviceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TwilioSendOTP indicates an expected call of TwilioSendOTP.
func (mr *MockHelperMockRecorder) TwilioSendOTP(phone, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioSendOTP", reflect.TypeOf((*MockHelper)(nil).TwilioSendOTP), phone, serviceID)
}

// TwilioSetup mocks base method.
func (m *MockHelper) TwilioSetup(username, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TwilioSetup", username, password)
}

// TwilioSetup indicates an expected call of TwilioSetup.
func (mr *MockHelperMockRecorder) TwilioSetup(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioSetup", reflect.TypeOf((*MockHelper)(nil).TwilioSetup), username, password)
}

// TwilioVerifyOTP mocks base method.
func (m *MockHelper) TwilioVerifyOTP(serviceID, code, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwilioVerifyOTP", serviceID, code, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// TwilioVerifyOTP indicates an expected call of TwilioVerifyOTP.
func (mr *MockHelperMockRecorder) TwilioVerifyOTP(serviceID, code, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioVerifyOTP", reflect.TypeOf((*MockHelper)(nil).TwilioVerifyOTP), serviceID, code, phone)
}

// ValidateAlphabets mocks base method.
func (m *MockHelper) ValidateAlphabets(data string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAlphabets", data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAlphabets indicates an expected call of ValidateAlphabets.
func (mr *MockHelperMockRecorder) ValidateAlphabets(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAlphabets", reflect.TypeOf((*MockHelper)(nil).ValidateAlphabets), data)
}
